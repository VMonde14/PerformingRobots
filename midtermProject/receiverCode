#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

#define ledPin 6
#define ledCount 64

#define brightness 10

bool onoff = LOW;

int counter = 0;    //counter for energy drain
int counter2 = 0; //counter for sleep


const int CEPIN = 9;
const int CSNPIN = 10;

Adafruit_NeoPixel strip(ledCount, ledPin, NEO_GRB);

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
RF24 radio(CEPIN, CSNPIN);  // CE, CSN

const byte address[6] = "00001"; //address to find data

//wheel pins
const int rightDirPin = 4;
const int rightPWMPin = 5;
const int leftDirPin = 3;
const int leftPWMPin = 2;

const long interval = 1000;
bool sleepEnabled = LOW;
int spd = 200;

void setup() {
  strip.begin();
  strip.show();
  strip.setBrightness(brightness);

  pinMode(rightDirPin, OUTPUT);
  pinMode(leftDirPin, OUTPUT);

  Serial.begin(115200);

  bool retval = radio.begin();


  radio.openReadingPipe(0, address);  // Destination address
  radio.setPALevel(RF24_PA_MIN);      // Min or max
  radio.startListening();             // sets  module as receiver

//create the initial green energy bar
  for (int i = 25; i <= 30; i++) {
    strip.setPixelColor(i, strip.Color(0, 255, 0));
    strip.show();
    delay(5);
  }
  for (int i = 33; i <= 38; i++) {
    strip.setPixelColor(i, strip.Color(0, 255, 0));
    strip.show();
    delay(5);
  }
}

void loop() {
  shape();
  energybar();
  sleep();

  if (radio.available())  //Looking for the data.
  {
    int data;

    radio.read(&data, sizeof(data));  //Reading the data

    switch (data) {
        break;
      case 0x01:
        Serial.println("turning right");    //turn on the right wheel 
          digitalWrite(rightDirPin, spd);
          analogWrite(rightPWMPin, LOW);
          onoff = HIGH;
          counter++;
        break;
      case 0x02:
        Serial.println("sleep");    //activate the sleep function
        strip.setPixelColor(1, strip.Color(255, 0, 0));
        sleepEnabled = HIGH;
        break;
      case 0x04:
        Serial.println("turning left");   //turn on the left wheel
          digitalWrite(leftDirPin, spd);
          analogWrite(leftPWMPin, LOW);
          onoff = HIGH;
          counter++;
        break;
      default:
        Serial.println("invalid code");
        stop();
        digitalWrite(rightDirPin, LOW);
        digitalWrite(rightPWMPin, LOW);
        break;
    }
  }
  else {
    Serial.println("stop");
    stop();
  }
  delay(5);
}

void stop() {
  digitalWrite(rightDirPin, LOW);
  analogWrite(rightPWMPin, 0);
  digitalWrite(leftDirPin, LOW);
  analogWrite(leftPWMPin, 0);
}

void energybar() {

  if (onoff = HIGH) {   //as the button is pressed, decrease energy
    if (counter >= 20) {
      strip.setPixelColor(25, strip.Color(100, 100, 0));
      strip.setPixelColor(33, strip.Color(100, 100, 0));
    }
    if (counter >= 40) {
      strip.setPixelColor(26, strip.Color(150, 100, 0));
      strip.setPixelColor(34, strip.Color(150, 100, 0));
    }
    if (counter >= 60) {
      strip.setPixelColor(27, strip.Color(200, 100, 0));
      strip.setPixelColor(35, strip.Color(200, 100, 0));
    }
    if (counter >= 80) {
      strip.setPixelColor(28, strip.Color(250, 50, 0));
      strip.setPixelColor(36, strip.Color(250, 50, 0));
    }
    if (counter >= 100) {
      strip.setPixelColor(29, strip.Color(250, 25, 0));
      strip.setPixelColor(37, strip.Color(250, 25, 0));
      spd = 100;
    }
    if (counter >= 120) {
      strip.setPixelColor(30, strip.Color(250, 0, 0));
      strip.setPixelColor(38, strip.Color(250, 0, 0));
      spd = 50;
    }
    if (counter >= 140) {   //if the energy runs out, activate sleep and reduce speed
      //Serial.println("I'm here!");
      strip.clear();
      delay(5);
      sleep();
      //counter = 0;
      onoff = LOW;
      spd = 0;
    }
  }
  Serial.println(spd);
  strip.show(); //update neopixel and show energy bar
  delay(5);
}


void sleep() {

  //Serial.println("I'm in sleep");

  if (sleepEnabled == HIGH) {   //reset the speed once it is well rested
    spd = 200;

    for (int i = 25; i <= 30; i++) {    //if the button is pushed, it will recharge
      strip.setPixelColor(i, strip.Color(0, 255, 0));
      strip.show();
      delay(5);
    }
    for (int i = 33; i <= 38; i++) {
      strip.setPixelColor(i, strip.Color(0, 255, 0));
      strip.show();
      delay(5);
    }

/*this is the original sequence for the "powering up"

        unsigned long currentMillis = millis();
        unsigned long previousMillis = 0;
    
        if (currentMillis - previousMillis >= interval) {
          previousMillis = currentMillis;
    
          if (counter2 == 0) {
            strip.setPixelColor(25, strip.Color(0, 100, 0));
            strip.setPixelColor(33, strip.Color(0, 100, 0));
    
          }
          if (counter2 == 1) {
            strip.setPixelColor(26, strip.Color(0, 100, 0));
            strip.setPixelColor(34, strip.Color(0, 100, 0));
    
          }
          if (counter2 == 2) {
            strip.setPixelColor(27, strip.Color(0, 100, 0));
            strip.setPixelColor(35, strip.Color(0, 100, 0));
    
          }
          if (counter2 == 3) {
            strip.setPixelColor(28, strip.Color(0, 100, 0));
            strip.setPixelColor(36, strip.Color(0, 100, 0));
    
          }
          if (counter2 == 4) {
            strip.setPixelColor(29, strip.Color(0, 100, 0));
            strip.setPixelColor(37, strip.Color(0, 100, 0));
    
          }
          if (counter2 == 5) {
            strip.setPixelColor(30, strip.Color(0, 100, 0));
            strip.setPixelColor(38, strip.Color(0, 100, 0));
    
          }
          if (counter2 >= 6) {
            //sleepEnabled = LOW;
            onoff = HIGH;
          }
          counter2++;
        }
        strip.show();//update neopixel and show energy bar
        delay(5);
      }
    
      if (sleepEnabled == LOW) {
        counter2 = 0;
  }
  */

}

void shape() {

  //begin the base shape
  for (int i = 16; i <= 24; i++) {
    strip.setPixelColor(i, strip.Color(50, 50, 50));
  }

  for (int i = 40; i <= 47; i++) {
    strip.setPixelColor(i, strip.Color(50, 50, 50));
  }


  strip.setPixelColor(31, strip.Color(50, 50, 50));
  strip.setPixelColor(32, strip.Color(50, 50, 50));
  strip.setPixelColor(39, strip.Color(50, 50, 50));
  strip.setPixelColor(40, strip.Color(50, 50, 50));
  strip.setPixelColor(47, strip.Color(50, 50, 50));


}
